{"ast":null,"code":"import _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _get from \"@babel/runtime/helpers/get\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _excluded = [\"numberOfPointers\", \"direction\"];\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\nimport Hammer from '@egjs/hammerjs';\nimport { Direction } from \"./constants\";\nimport { GesturePropError } from \"./Errors\";\nimport DraggingGestureHandler from \"./DraggingGestureHandler\";\nimport { isnan } from \"./utils\";\nvar FlingGestureHandler = function (_DraggingGestureHandl) {\n  _inherits(FlingGestureHandler, _DraggingGestureHandl);\n  var _super = _createSuper(FlingGestureHandler);\n  function FlingGestureHandler() {\n    _classCallCheck(this, FlingGestureHandler);\n    return _super.apply(this, arguments);\n  }\n  _createClass(FlingGestureHandler, [{\n    key: \"name\",\n    get: function get() {\n      return 'swipe';\n    }\n  }, {\n    key: \"NativeGestureClass\",\n    get: function get() {\n      return Hammer.Swipe;\n    }\n  }, {\n    key: \"onGestureActivated\",\n    value: function onGestureActivated(event) {\n      this.sendEvent(_objectSpread(_objectSpread({}, event), {}, {\n        eventType: Hammer.INPUT_MOVE,\n        isFinal: false,\n        isFirst: true\n      }));\n      this.isGestureRunning = false;\n      this.hasGestureFailed = false;\n      this.sendEvent(_objectSpread(_objectSpread({}, event), {}, {\n        eventType: Hammer.INPUT_END,\n        isFinal: true\n      }));\n    }\n  }, {\n    key: \"onRawEvent\",\n    value: function onRawEvent(ev) {\n      var _this = this;\n      _get(_getPrototypeOf(FlingGestureHandler.prototype), \"onRawEvent\", this).call(this, ev);\n      if (this.hasGestureFailed) {\n        return;\n      }\n      if (ev.isFinal) {\n        setTimeout(function () {\n          if (_this.isGestureRunning) {\n            _this.cancelEvent(ev);\n          }\n        });\n      } else if (!this.hasGestureFailed && !this.isGestureRunning) {\n        var gesture = this.hammer.get(this.name);\n        if (gesture.options.enable(gesture, ev)) {\n          this.onStart(ev);\n          this.sendEvent(ev);\n        }\n      }\n    }\n  }, {\n    key: \"getHammerConfig\",\n    value: function getHammerConfig() {\n      return {\n        pointers: this.config.numberOfPointers,\n        direction: this.getDirection()\n      };\n    }\n  }, {\n    key: \"getTargetDirections\",\n    value: function getTargetDirections(direction) {\n      var directions = [];\n      if (direction & Direction.RIGHT) {\n        directions.push(Hammer.DIRECTION_RIGHT);\n      }\n      if (direction & Direction.LEFT) {\n        directions.push(Hammer.DIRECTION_LEFT);\n      }\n      if (direction & Direction.UP) {\n        directions.push(Hammer.DIRECTION_UP);\n      }\n      if (direction & Direction.DOWN) {\n        directions.push(Hammer.DIRECTION_DOWN);\n      }\n      return directions;\n    }\n  }, {\n    key: \"getDirection\",\n    value: function getDirection() {\n      var _this$getConfig = this.getConfig(),\n        direction = _this$getConfig.direction;\n      var directions = [];\n      if (direction & Direction.RIGHT) {\n        directions.push(Hammer.DIRECTION_HORIZONTAL);\n      }\n      if (direction & Direction.LEFT) {\n        directions.push(Hammer.DIRECTION_HORIZONTAL);\n      }\n      if (direction & Direction.UP) {\n        directions.push(Hammer.DIRECTION_VERTICAL);\n      }\n      if (direction & Direction.DOWN) {\n        directions.push(Hammer.DIRECTION_VERTICAL);\n      }\n      directions = _toConsumableArray(new Set(directions));\n      if (directions.length === 0) return Hammer.DIRECTION_NONE;\n      if (directions.length === 1) return directions[0];\n      return Hammer.DIRECTION_ALL;\n    }\n  }, {\n    key: \"isGestureEnabledForEvent\",\n    value: function isGestureEnabledForEvent(_ref, _recognizer, _ref2) {\n      var numberOfPointers = _ref.numberOfPointers;\n      var pointerLength = _ref2.maxPointers;\n      var validPointerCount = pointerLength === numberOfPointers;\n      if (!validPointerCount && this.isGestureRunning) {\n        return {\n          failed: true\n        };\n      }\n      return {\n        success: validPointerCount\n      };\n    }\n  }, {\n    key: \"updateGestureConfig\",\n    value: function updateGestureConfig(_ref3) {\n      var _ref3$numberOfPointer = _ref3.numberOfPointers,\n        numberOfPointers = _ref3$numberOfPointer === void 0 ? 1 : _ref3$numberOfPointer,\n        direction = _ref3.direction,\n        props = _objectWithoutProperties(_ref3, _excluded);\n      if (isnan(direction) || typeof direction !== 'number') {\n        throw new GesturePropError('direction', direction, 'number');\n      }\n      return _get(_getPrototypeOf(FlingGestureHandler.prototype), \"updateGestureConfig\", this).call(this, _objectSpread({\n        numberOfPointers: numberOfPointers,\n        direction: direction\n      }, props));\n    }\n  }]);\n  return FlingGestureHandler;\n}(DraggingGestureHandler);\nexport default FlingGestureHandler;","map":{"version":3,"names":["Hammer","Direction","GesturePropError","DraggingGestureHandler","isnan","FlingGestureHandler","_DraggingGestureHandl","_inherits","_super","_createSuper","_classCallCheck","apply","arguments","_createClass","key","get","Swipe","value","onGestureActivated","event","sendEvent","_objectSpread","eventType","INPUT_MOVE","isFinal","isFirst","isGestureRunning","hasGestureFailed","INPUT_END","onRawEvent","ev","_this","_get","_getPrototypeOf","prototype","call","setTimeout","cancelEvent","gesture","hammer","name","options","enable","onStart","getHammerConfig","pointers","config","numberOfPointers","direction","getDirection","getTargetDirections","directions","RIGHT","push","DIRECTION_RIGHT","LEFT","DIRECTION_LEFT","UP","DIRECTION_UP","DOWN","DIRECTION_DOWN","_this$getConfig","getConfig","DIRECTION_HORIZONTAL","DIRECTION_VERTICAL","_toConsumableArray","Set","length","DIRECTION_NONE","DIRECTION_ALL","isGestureEnabledForEvent","_ref","_recognizer","_ref2","pointerLength","maxPointers","validPointerCount","failed","success","updateGestureConfig","_ref3","_ref3$numberOfPointer","props","_objectWithoutProperties","_excluded"],"sources":["C:/Users/A S Computer/recipes-app-react-native-master/node_modules/react-native-gesture-handler/lib/module/web/FlingGestureHandler.js"],"sourcesContent":["/* eslint-disable eslint-comments/no-unlimited-disable */\n\n/* eslint-disable */\nimport Hammer from '@egjs/hammerjs';\nimport { Direction } from './constants';\nimport { GesturePropError } from './Errors';\nimport DraggingGestureHandler from './DraggingGestureHandler';\nimport { isnan } from './utils';\n\nclass FlingGestureHandler extends DraggingGestureHandler {\n  get name() {\n    return 'swipe';\n  }\n\n  get NativeGestureClass() {\n    return Hammer.Swipe;\n  }\n\n  onGestureActivated(event) {\n    this.sendEvent({ ...event,\n      eventType: Hammer.INPUT_MOVE,\n      isFinal: false,\n      isFirst: true\n    });\n    this.isGestureRunning = false;\n    this.hasGestureFailed = false;\n    this.sendEvent({ ...event,\n      eventType: Hammer.INPUT_END,\n      isFinal: true\n    });\n  }\n\n  onRawEvent(ev) {\n    super.onRawEvent(ev);\n\n    if (this.hasGestureFailed) {\n      return;\n    } // Hammer doesn't send a `cancel` event for taps.\n    // Manually fail the event.\n\n\n    if (ev.isFinal) {\n      setTimeout(() => {\n        if (this.isGestureRunning) {\n          this.cancelEvent(ev);\n        }\n      });\n    } else if (!this.hasGestureFailed && !this.isGestureRunning) {\n      // Tap Gesture start event\n      const gesture = this.hammer.get(this.name); // @ts-ignore FIXME(TS)\n\n      if (gesture.options.enable(gesture, ev)) {\n        this.onStart(ev);\n        this.sendEvent(ev);\n      }\n    }\n  }\n\n  getHammerConfig() {\n    return {\n      // @ts-ignore FIXME(TS)\n      pointers: this.config.numberOfPointers,\n      direction: this.getDirection()\n    };\n  }\n\n  getTargetDirections(direction) {\n    const directions = [];\n\n    if (direction & Direction.RIGHT) {\n      directions.push(Hammer.DIRECTION_RIGHT);\n    }\n\n    if (direction & Direction.LEFT) {\n      directions.push(Hammer.DIRECTION_LEFT);\n    }\n\n    if (direction & Direction.UP) {\n      directions.push(Hammer.DIRECTION_UP);\n    }\n\n    if (direction & Direction.DOWN) {\n      directions.push(Hammer.DIRECTION_DOWN);\n    } // const hammerDirection = directions.reduce((a, b) => a | b, 0);\n\n\n    return directions;\n  }\n\n  getDirection() {\n    // @ts-ignore FIXME(TS)\n    const {\n      direction\n    } = this.getConfig();\n    let directions = [];\n\n    if (direction & Direction.RIGHT) {\n      directions.push(Hammer.DIRECTION_HORIZONTAL);\n    }\n\n    if (direction & Direction.LEFT) {\n      directions.push(Hammer.DIRECTION_HORIZONTAL);\n    }\n\n    if (direction & Direction.UP) {\n      directions.push(Hammer.DIRECTION_VERTICAL);\n    }\n\n    if (direction & Direction.DOWN) {\n      directions.push(Hammer.DIRECTION_VERTICAL);\n    }\n\n    directions = [...new Set(directions)];\n    if (directions.length === 0) return Hammer.DIRECTION_NONE;\n    if (directions.length === 1) return directions[0];\n    return Hammer.DIRECTION_ALL;\n  }\n\n  isGestureEnabledForEvent({\n    numberOfPointers\n  }, _recognizer, {\n    maxPointers: pointerLength\n  }) {\n    const validPointerCount = pointerLength === numberOfPointers;\n\n    if (!validPointerCount && this.isGestureRunning) {\n      return {\n        failed: true\n      };\n    }\n\n    return {\n      success: validPointerCount\n    };\n  }\n\n  updateGestureConfig({\n    numberOfPointers = 1,\n    direction,\n    ...props\n  }) {\n    if (isnan(direction) || typeof direction !== 'number') {\n      throw new GesturePropError('direction', direction, 'number');\n    }\n\n    return super.updateGestureConfig({\n      numberOfPointers,\n      direction,\n      ...props\n    });\n  }\n\n}\n\nexport default FlingGestureHandler;\n//# sourceMappingURL=FlingGestureHandler.js.map"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
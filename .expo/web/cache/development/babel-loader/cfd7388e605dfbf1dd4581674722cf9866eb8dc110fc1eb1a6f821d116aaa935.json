{"ast":null,"code":"import _defineProperty2 from \"@babel/runtime/helpers/defineProperty\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty2(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\nimport * as React from 'react';\nimport { Component } from 'react';\nimport invariant from 'invariant';\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Keyboard from \"react-native-web/dist/exports/Keyboard\";\nimport StatusBar from \"react-native-web/dist/exports/StatusBar\";\nimport I18nManager from \"react-native-web/dist/exports/I18nManager\";\nimport { PanGestureHandler } from \"../handlers/PanGestureHandler\";\nimport { TapGestureHandler } from \"../handlers/TapGestureHandler\";\nimport { State } from \"../State\";\nvar DRAG_TOSS = 0.05;\nvar IDLE = 'Idle';\nvar DRAGGING = 'Dragging';\nvar SETTLING = 'Settling';\nvar DrawerLayout = function (_Component) {\n  _inherits(DrawerLayout, _Component);\n  var _super = _createSuper(DrawerLayout);\n  function DrawerLayout(_props) {\n    var _this;\n    _classCallCheck(this, DrawerLayout);\n    _this = _super.call(this, _props);\n    _defineProperty(_assertThisInitialized(_this), \"openValue\", void 0);\n    _defineProperty(_assertThisInitialized(_this), \"onGestureEvent\", void 0);\n    _defineProperty(_assertThisInitialized(_this), \"accessibilityIsModalView\", React.createRef());\n    _defineProperty(_assertThisInitialized(_this), \"pointerEventsView\", React.createRef());\n    _defineProperty(_assertThisInitialized(_this), \"panGestureHandler\", React.createRef());\n    _defineProperty(_assertThisInitialized(_this), \"drawerShown\", false);\n    _defineProperty(_assertThisInitialized(_this), \"updateAnimatedEvent\", function (props, state) {\n      var drawerPosition = props.drawerPosition,\n        drawerWidth = props.drawerWidth,\n        drawerType = props.drawerType;\n      var dragXValue = state.dragX,\n        touchXValue = state.touchX,\n        drawerTranslation = state.drawerTranslation,\n        containerWidth = state.containerWidth;\n      var dragX = dragXValue;\n      var touchX = touchXValue;\n      if (drawerPosition !== 'left') {\n        dragX = Animated.multiply(new Animated.Value(-1), dragXValue);\n        touchX = Animated.add(new Animated.Value(containerWidth), Animated.multiply(new Animated.Value(-1), touchXValue));\n        touchXValue.setValue(containerWidth);\n      } else {\n        touchXValue.setValue(0);\n      }\n      var translationX = dragX;\n      if (drawerType === 'front') {\n        var startPositionX = Animated.add(touchX, Animated.multiply(new Animated.Value(-1), dragX));\n        var dragOffsetFromOnStartPosition = startPositionX.interpolate({\n          inputRange: [drawerWidth - 1, drawerWidth, drawerWidth + 1],\n          outputRange: [0, 0, 1]\n        });\n        translationX = Animated.add(dragX, dragOffsetFromOnStartPosition);\n      }\n      _this.openValue = Animated.add(translationX, drawerTranslation).interpolate({\n        inputRange: [0, drawerWidth],\n        outputRange: [0, 1],\n        extrapolate: 'clamp'\n      });\n      var gestureOptions = {\n        useNativeDriver: props.useNativeAnimations\n      };\n      if (_this.props.onDrawerSlide) {\n        gestureOptions.listener = function (ev) {\n          var _this$props$onDrawerS, _this$props;\n          var translationX = Math.floor(Math.abs(ev.nativeEvent.translationX));\n          var position = translationX / _this.state.containerWidth;\n          (_this$props$onDrawerS = (_this$props = _this.props).onDrawerSlide) === null || _this$props$onDrawerS === void 0 ? void 0 : _this$props$onDrawerS.call(_this$props, position);\n        };\n      }\n      _this.onGestureEvent = Animated.event([{\n        nativeEvent: {\n          translationX: dragXValue,\n          x: touchXValue\n        }\n      }], gestureOptions);\n    });\n    _defineProperty(_assertThisInitialized(_this), \"handleContainerLayout\", function (_ref) {\n      var nativeEvent = _ref.nativeEvent;\n      _this.setState({\n        containerWidth: nativeEvent.layout.width\n      });\n    });\n    _defineProperty(_assertThisInitialized(_this), \"emitStateChanged\", function (newState, drawerWillShow) {\n      var _this$props$onDrawerS2, _this$props2;\n      (_this$props$onDrawerS2 = (_this$props2 = _this.props).onDrawerStateChanged) === null || _this$props$onDrawerS2 === void 0 ? void 0 : _this$props$onDrawerS2.call(_this$props2, newState, drawerWillShow);\n    });\n    _defineProperty(_assertThisInitialized(_this), \"openingHandlerStateChange\", function (_ref2) {\n      var nativeEvent = _ref2.nativeEvent;\n      if (nativeEvent.oldState === State.ACTIVE) {\n        _this.handleRelease({\n          nativeEvent: nativeEvent\n        });\n      } else if (nativeEvent.state === State.ACTIVE) {\n        _this.emitStateChanged(DRAGGING, false);\n        _this.setState({\n          drawerState: DRAGGING\n        });\n        if (_this.props.keyboardDismissMode === 'on-drag') {\n          Keyboard.dismiss();\n        }\n        if (_this.props.hideStatusBar) {\n          StatusBar.setHidden(true, _this.props.statusBarAnimation || 'slide');\n        }\n      }\n    });\n    _defineProperty(_assertThisInitialized(_this), \"onTapHandlerStateChange\", function (_ref3) {\n      var nativeEvent = _ref3.nativeEvent;\n      if (_this.drawerShown && nativeEvent.oldState === State.ACTIVE && _this.props.drawerLockMode !== 'locked-open') {\n        _this.closeDrawer();\n      }\n    });\n    _defineProperty(_assertThisInitialized(_this), \"handleRelease\", function (_ref4) {\n      var nativeEvent = _ref4.nativeEvent;\n      var _this$props6 = _this.props,\n        drawerWidth = _this$props6.drawerWidth,\n        drawerPosition = _this$props6.drawerPosition,\n        drawerType = _this$props6.drawerType;\n      var containerWidth = _this.state.containerWidth;\n      var dragX = nativeEvent.translationX,\n        velocityX = nativeEvent.velocityX,\n        touchX = nativeEvent.x;\n      if (drawerPosition !== 'left') {\n        dragX = -dragX;\n        touchX = containerWidth - touchX;\n        velocityX = -velocityX;\n      }\n      var gestureStartX = touchX - dragX;\n      var dragOffsetBasedOnStart = 0;\n      if (drawerType === 'front') {\n        dragOffsetBasedOnStart = gestureStartX > drawerWidth ? gestureStartX - drawerWidth : 0;\n      }\n      var startOffsetX = dragX + dragOffsetBasedOnStart + (_this.drawerShown ? drawerWidth : 0);\n      var projOffsetX = startOffsetX + DRAG_TOSS * velocityX;\n      var shouldOpen = projOffsetX > drawerWidth / 2;\n      if (shouldOpen) {\n        _this.animateDrawer(startOffsetX, drawerWidth, velocityX);\n      } else {\n        _this.animateDrawer(startOffsetX, 0, velocityX);\n      }\n    });\n    _defineProperty(_assertThisInitialized(_this), \"updateShowing\", function (showing) {\n      var _this$accessibilityIs, _this$pointerEventsVi, _this$panGestureHandl;\n      _this.drawerShown = showing;\n      (_this$accessibilityIs = _this.accessibilityIsModalView.current) === null || _this$accessibilityIs === void 0 ? void 0 : _this$accessibilityIs.setNativeProps({\n        accessibilityViewIsModal: showing\n      });\n      (_this$pointerEventsVi = _this.pointerEventsView.current) === null || _this$pointerEventsVi === void 0 ? void 0 : _this$pointerEventsVi.setNativeProps({\n        pointerEvents: showing ? 'auto' : 'none'\n      });\n      var _this$props7 = _this.props,\n        drawerPosition = _this$props7.drawerPosition,\n        minSwipeDistance = _this$props7.minSwipeDistance,\n        edgeWidth = _this$props7.edgeWidth;\n      var fromLeft = drawerPosition === 'left';\n      var gestureOrientation = (fromLeft ? 1 : -1) * (_this.drawerShown ? -1 : 1);\n      var hitSlop = fromLeft ? {\n        left: 0,\n        width: showing ? undefined : edgeWidth\n      } : {\n        right: 0,\n        width: showing ? undefined : edgeWidth\n      };\n      (_this$panGestureHandl = _this.panGestureHandler.current) === null || _this$panGestureHandl === void 0 ? void 0 : _this$panGestureHandl.setNativeProps({\n        hitSlop: hitSlop,\n        activeOffsetX: gestureOrientation * minSwipeDistance\n      });\n    });\n    _defineProperty(_assertThisInitialized(_this), \"animateDrawer\", function (fromValue, toValue, velocity, speed) {\n      _this.state.dragX.setValue(0);\n      _this.state.touchX.setValue(_this.props.drawerPosition === 'left' ? 0 : _this.state.containerWidth);\n      if (fromValue != null) {\n        var nextFramePosition = fromValue;\n        if (_this.props.useNativeAnimations) {\n          if (fromValue < toValue && velocity > 0) {\n            nextFramePosition = Math.min(fromValue + velocity / 60.0, toValue);\n          } else if (fromValue > toValue && velocity < 0) {\n            nextFramePosition = Math.max(fromValue + velocity / 60.0, toValue);\n          }\n        }\n        _this.state.drawerTranslation.setValue(nextFramePosition);\n      }\n      var willShow = toValue !== 0;\n      _this.updateShowing(willShow);\n      _this.emitStateChanged(SETTLING, willShow);\n      _this.setState({\n        drawerState: SETTLING\n      });\n      if (_this.props.hideStatusBar) {\n        StatusBar.setHidden(willShow, _this.props.statusBarAnimation || 'slide');\n      }\n      Animated.spring(_this.state.drawerTranslation, {\n        velocity: velocity,\n        bounciness: 0,\n        toValue: toValue,\n        useNativeDriver: _this.props.useNativeAnimations,\n        speed: speed !== null && speed !== void 0 ? speed : undefined\n      }).start(function (_ref5) {\n        var finished = _ref5.finished;\n        if (finished) {\n          _this.emitStateChanged(IDLE, willShow);\n          _this.setState({\n            drawerOpened: willShow\n          });\n          if (_this.state.drawerState !== DRAGGING) {\n            _this.setState({\n              drawerState: IDLE\n            });\n          }\n          if (willShow) {\n            var _this$props$onDrawerO, _this$props3;\n            (_this$props$onDrawerO = (_this$props3 = _this.props).onDrawerOpen) === null || _this$props$onDrawerO === void 0 ? void 0 : _this$props$onDrawerO.call(_this$props3);\n          } else {\n            var _this$props$onDrawerC, _this$props4;\n            (_this$props$onDrawerC = (_this$props4 = _this.props).onDrawerClose) === null || _this$props$onDrawerC === void 0 ? void 0 : _this$props$onDrawerC.call(_this$props4);\n          }\n        }\n      });\n    });\n    _defineProperty(_assertThisInitialized(_this), \"openDrawer\", function () {\n      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      _this.animateDrawer(undefined, _this.props.drawerWidth, options.velocity ? options.velocity : 0, options.speed);\n      _this.forceUpdate();\n    });\n    _defineProperty(_assertThisInitialized(_this), \"closeDrawer\", function () {\n      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      _this.animateDrawer(undefined, 0, options.velocity ? options.velocity : 0, options.speed);\n      _this.forceUpdate();\n    });\n    _defineProperty(_assertThisInitialized(_this), \"renderOverlay\", function () {\n      invariant(_this.openValue, 'should be set');\n      var overlayOpacity;\n      if (_this.state.drawerState !== IDLE) {\n        overlayOpacity = _this.openValue;\n      } else {\n        overlayOpacity = _this.state.drawerOpened ? 1 : 0;\n      }\n      var dynamicOverlayStyles = {\n        opacity: overlayOpacity,\n        backgroundColor: _this.props.overlayColor\n      };\n      return React.createElement(TapGestureHandler, {\n        onHandlerStateChange: _this.onTapHandlerStateChange\n      }, React.createElement(Animated.View, {\n        pointerEvents: _this.drawerShown ? 'auto' : 'none',\n        ref: _this.pointerEventsView,\n        style: [styles.overlay, dynamicOverlayStyles]\n      }));\n    });\n    _defineProperty(_assertThisInitialized(_this), \"renderDrawer\", function () {\n      var _this$props8 = _this.props,\n        drawerBackgroundColor = _this$props8.drawerBackgroundColor,\n        drawerWidth = _this$props8.drawerWidth,\n        drawerPosition = _this$props8.drawerPosition,\n        drawerType = _this$props8.drawerType,\n        drawerContainerStyle = _this$props8.drawerContainerStyle,\n        contentContainerStyle = _this$props8.contentContainerStyle;\n      var fromLeft = drawerPosition === 'left';\n      var drawerSlide = drawerType !== 'back';\n      var containerSlide = drawerType !== 'front';\n      var reverseContentDirection = I18nManager.isRTL ? fromLeft : !fromLeft;\n      var dynamicDrawerStyles = {\n        backgroundColor: drawerBackgroundColor,\n        width: drawerWidth\n      };\n      var openValue = _this.openValue;\n      invariant(openValue, 'should be set');\n      var containerStyles;\n      if (containerSlide) {\n        var containerTranslateX = openValue.interpolate({\n          inputRange: [0, 1],\n          outputRange: fromLeft ? [0, drawerWidth] : [0, -drawerWidth],\n          extrapolate: 'clamp'\n        });\n        containerStyles = {\n          transform: [{\n            translateX: containerTranslateX\n          }]\n        };\n      }\n      var drawerTranslateX = 0;\n      if (drawerSlide) {\n        var closedDrawerOffset = fromLeft ? -drawerWidth : drawerWidth;\n        if (_this.state.drawerState !== IDLE) {\n          drawerTranslateX = openValue.interpolate({\n            inputRange: [0, 1],\n            outputRange: [closedDrawerOffset, 0],\n            extrapolate: 'clamp'\n          });\n        } else {\n          drawerTranslateX = _this.state.drawerOpened ? 0 : closedDrawerOffset;\n        }\n      }\n      var drawerStyles = {\n        transform: [{\n          translateX: drawerTranslateX\n        }],\n        flexDirection: reverseContentDirection ? 'row-reverse' : 'row'\n      };\n      return React.createElement(Animated.View, {\n        style: styles.main,\n        onLayout: _this.handleContainerLayout\n      }, React.createElement(Animated.View, {\n        style: [drawerType === 'front' ? styles.containerOnBack : styles.containerInFront, containerStyles, contentContainerStyle],\n        importantForAccessibility: _this.drawerShown ? 'no-hide-descendants' : 'yes'\n      }, typeof _this.props.children === 'function' ? _this.props.children(_this.openValue) : _this.props.children, _this.renderOverlay()), React.createElement(Animated.View, {\n        pointerEvents: \"box-none\",\n        ref: _this.accessibilityIsModalView,\n        accessibilityViewIsModal: _this.drawerShown,\n        style: [styles.drawerContainer, drawerStyles, drawerContainerStyle]\n      }, React.createElement(View, {\n        style: dynamicDrawerStyles\n      }, _this.props.renderNavigationView(_this.openValue))));\n    });\n    _defineProperty(_assertThisInitialized(_this), \"setPanGestureRef\", function (ref) {\n      var _this$props$onGesture, _this$props5;\n      _this.panGestureHandler.current = ref;\n      (_this$props$onGesture = (_this$props5 = _this.props).onGestureRef) === null || _this$props$onGesture === void 0 ? void 0 : _this$props$onGesture.call(_this$props5, ref);\n    });\n    var _dragX = new Animated.Value(0);\n    var _touchX = new Animated.Value(0);\n    var _drawerTranslation = new Animated.Value(0);\n    _this.state = {\n      dragX: _dragX,\n      touchX: _touchX,\n      drawerTranslation: _drawerTranslation,\n      containerWidth: 0,\n      drawerState: IDLE,\n      drawerOpened: false\n    };\n    _this.updateAnimatedEvent(_props, _this.state);\n    return _this;\n  }\n  _createClass(DrawerLayout, [{\n    key: \"UNSAFE_componentWillUpdate\",\n    value: function UNSAFE_componentWillUpdate(props, state) {\n      if (this.props.drawerPosition !== props.drawerPosition || this.props.drawerWidth !== props.drawerWidth || this.props.drawerType !== props.drawerType || this.state.containerWidth !== state.containerWidth) {\n        this.updateAnimatedEvent(props, state);\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props9 = this.props,\n        drawerPosition = _this$props9.drawerPosition,\n        drawerLockMode = _this$props9.drawerLockMode,\n        edgeWidth = _this$props9.edgeWidth,\n        minSwipeDistance = _this$props9.minSwipeDistance;\n      var fromLeft = drawerPosition === 'left';\n      var gestureOrientation = (fromLeft ? 1 : -1) * (this.drawerShown ? -1 : 1);\n      var hitSlop = fromLeft ? {\n        left: 0,\n        width: this.drawerShown ? undefined : edgeWidth\n      } : {\n        right: 0,\n        width: this.drawerShown ? undefined : edgeWidth\n      };\n      return React.createElement(PanGestureHandler, {\n        ref: this.setPanGestureRef,\n        hitSlop: hitSlop,\n        activeOffsetX: gestureOrientation * minSwipeDistance,\n        failOffsetY: [-15, 15],\n        onGestureEvent: this.onGestureEvent,\n        onHandlerStateChange: this.openingHandlerStateChange,\n        enableTrackpadTwoFingerGesture: this.props.enableTrackpadTwoFingerGesture,\n        enabled: drawerLockMode !== 'locked-closed' && drawerLockMode !== 'locked-open'\n      }, this.renderDrawer());\n    }\n  }]);\n  return DrawerLayout;\n}(Component);\nexport { DrawerLayout as default };\n_defineProperty(DrawerLayout, \"defaultProps\", {\n  drawerWidth: 200,\n  drawerPosition: 'left',\n  useNativeAnimations: true,\n  drawerType: 'front',\n  edgeWidth: 20,\n  minSwipeDistance: 3,\n  overlayColor: 'rgba(0, 0, 0, 0.7)',\n  drawerLockMode: 'unlocked',\n  enableTrackpadTwoFingerGesture: false\n});\n_defineProperty(DrawerLayout, \"positions\", {\n  Left: 'left',\n  Right: 'right'\n});\nvar styles = StyleSheet.create({\n  drawerContainer: _objectSpread(_objectSpread({}, StyleSheet.absoluteFillObject), {}, {\n    zIndex: 1001,\n    flexDirection: 'row'\n  }),\n  containerInFront: _objectSpread(_objectSpread({}, StyleSheet.absoluteFillObject), {}, {\n    zIndex: 1002\n  }),\n  containerOnBack: _objectSpread({}, StyleSheet.absoluteFillObject),\n  main: {\n    flex: 1,\n    zIndex: 0,\n    overflow: 'hidden'\n  },\n  overlay: _objectSpread(_objectSpread({}, StyleSheet.absoluteFillObject), {}, {\n    zIndex: 1000\n  })\n});","map":{"version":3,"names":["_defineProperty","obj","key","value","Object","defineProperty","enumerable","configurable","writable","React","Component","invariant","Animated","StyleSheet","View","Keyboard","StatusBar","I18nManager","PanGestureHandler","TapGestureHandler","State","DRAG_TOSS","IDLE","DRAGGING","SETTLING","DrawerLayout","_Component","_inherits","_super","_createSuper","_props","_this","_classCallCheck","call","_assertThisInitialized","createRef","props","state","drawerPosition","drawerWidth","drawerType","dragXValue","dragX","touchXValue","touchX","drawerTranslation","containerWidth","multiply","Value","add","setValue","translationX","startPositionX","dragOffsetFromOnStartPosition","interpolate","inputRange","outputRange","openValue","extrapolate","gestureOptions","useNativeDriver","useNativeAnimations","onDrawerSlide","listener","ev","_this$props$onDrawerS","_this$props","Math","floor","abs","nativeEvent","position","onGestureEvent","event","x","_ref","setState","layout","width","newState","drawerWillShow","_this$props$onDrawerS2","_this$props2","onDrawerStateChanged","_ref2","oldState","ACTIVE","handleRelease","emitStateChanged","drawerState","keyboardDismissMode","dismiss","hideStatusBar","setHidden","statusBarAnimation","_ref3","drawerShown","drawerLockMode","closeDrawer","_ref4","_this$props6","velocityX","gestureStartX","dragOffsetBasedOnStart","startOffsetX","projOffsetX","shouldOpen","animateDrawer","showing","_this$accessibilityIs","_this$pointerEventsVi","_this$panGestureHandl","accessibilityIsModalView","current","setNativeProps","accessibilityViewIsModal","pointerEventsView","pointerEvents","_this$props7","minSwipeDistance","edgeWidth","fromLeft","gestureOrientation","hitSlop","left","undefined","right","panGestureHandler","activeOffsetX","fromValue","toValue","velocity","speed","nextFramePosition","min","max","willShow","updateShowing","spring","bounciness","start","_ref5","finished","drawerOpened","_this$props$onDrawerO","_this$props3","onDrawerOpen","_this$props$onDrawerC","_this$props4","onDrawerClose","options","arguments","length","forceUpdate","overlayOpacity","dynamicOverlayStyles","opacity","backgroundColor","overlayColor","createElement","onHandlerStateChange","onTapHandlerStateChange","ref","style","styles","overlay","_this$props8","drawerBackgroundColor","drawerContainerStyle","contentContainerStyle","drawerSlide","containerSlide","reverseContentDirection","isRTL","dynamicDrawerStyles","containerStyles","containerTranslateX","transform","translateX","drawerTranslateX","closedDrawerOffset","drawerStyles","flexDirection","main","onLayout","handleContainerLayout","containerOnBack","containerInFront","importantForAccessibility","children","renderOverlay","drawerContainer","renderNavigationView","_this$props$onGesture","_this$props5","onGestureRef","_dragX","_touchX","_drawerTranslation","updateAnimatedEvent","_createClass","UNSAFE_componentWillUpdate","render","_this$props9","setPanGestureRef","failOffsetY","openingHandlerStateChange","enableTrackpadTwoFingerGesture","enabled","renderDrawer","default","Left","Right","create","_objectSpread","absoluteFillObject","zIndex","flex","overflow"],"sources":["C:/Users/A S Computer/recipes-app-react-native-master/node_modules/react-native-gesture-handler/lib/module/components/DrawerLayout.js"],"sourcesContent":["function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n// This component is based on RN's DrawerLayoutAndroid API\n//\n// It perhaps deserves to be put in a separate repo, but since it relies on\n// react-native-gesture-handler library which isn't very popular at the moment I\n// decided to keep it here for the time being. It will allow us to move faster\n// and fix issues that may arise in gesture handler library that could be found\n// when using the drawer component\nimport * as React from 'react';\nimport { Component } from 'react';\nimport invariant from 'invariant';\nimport { Animated, StyleSheet, View, Keyboard, StatusBar, I18nManager } from 'react-native';\nimport { PanGestureHandler } from '../handlers/PanGestureHandler';\nimport { TapGestureHandler } from '../handlers/TapGestureHandler';\nimport { State } from '../State';\nconst DRAG_TOSS = 0.05;\nconst IDLE = 'Idle';\nconst DRAGGING = 'Dragging';\nconst SETTLING = 'Settling';\nexport default class DrawerLayout extends Component {\n  constructor(_props) {\n    super(_props);\n\n    _defineProperty(this, \"openValue\", void 0);\n\n    _defineProperty(this, \"onGestureEvent\", void 0);\n\n    _defineProperty(this, \"accessibilityIsModalView\", /*#__PURE__*/React.createRef());\n\n    _defineProperty(this, \"pointerEventsView\", /*#__PURE__*/React.createRef());\n\n    _defineProperty(this, \"panGestureHandler\", /*#__PURE__*/React.createRef());\n\n    _defineProperty(this, \"drawerShown\", false);\n\n    _defineProperty(this, \"updateAnimatedEvent\", (props, state) => {\n      // Event definition is based on\n      const {\n        drawerPosition,\n        drawerWidth,\n        drawerType\n      } = props;\n      const {\n        dragX: dragXValue,\n        touchX: touchXValue,\n        drawerTranslation,\n        containerWidth\n      } = state;\n      let dragX = dragXValue;\n      let touchX = touchXValue;\n\n      if (drawerPosition !== 'left') {\n        // Most of the code is written in a way to handle left-side drawer. In\n        // order to handle right-side drawer the only thing we need to do is to\n        // reverse events coming from gesture handler in a way they emulate\n        // left-side drawer gestures. E.g. dragX is simply -dragX, and touchX is\n        // calulcated by subtracing real touchX from the width of the container\n        // (such that when touch happens at the right edge the value is simply 0)\n        dragX = Animated.multiply(new Animated.Value(-1), dragXValue); // TODO(TS): (for all \"as\" in this file) make sure we can map this\n\n        touchX = Animated.add(new Animated.Value(containerWidth), Animated.multiply(new Animated.Value(-1), touchXValue)); // TODO(TS): make sure we can map this;\n\n        touchXValue.setValue(containerWidth);\n      } else {\n        touchXValue.setValue(0);\n      } // While closing the drawer when user starts gesture outside of its area (in greyed\n      // out part of the window), we want the drawer to follow only once finger reaches the\n      // edge of the drawer.\n      // E.g. on the diagram below drawer is illustrate by X signs and the greyed out area by\n      // dots. The touch gesture starts at '*' and moves left, touch path is indicated by\n      // an arrow pointing left\n      // 1) +---------------+ 2) +---------------+ 3) +---------------+ 4) +---------------+\n      //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n      //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n      //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n      //    |XXXXXXXX|......|    |XXXXXXXX|.<-*..|    |XXXXXXXX|<--*..|    |XXXXX|<-----*..|\n      //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n      //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n      //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n      //    +---------------+    +---------------+    +---------------+    +---------------+\n      //\n      // For the above to work properly we define animated value that will keep\n      // start position of the gesture. Then we use that value to calculate how\n      // much we need to subtract from the dragX. If the gesture started on the\n      // greyed out area we take the distance from the edge of the drawer to the\n      // start position. Otherwise we don't subtract at all and the drawer be\n      // pulled back as soon as you start the pan.\n      //\n      // This is used only when drawerType is \"front\"\n      //\n\n\n      let translationX = dragX;\n\n      if (drawerType === 'front') {\n        const startPositionX = Animated.add(touchX, Animated.multiply(new Animated.Value(-1), dragX));\n        const dragOffsetFromOnStartPosition = startPositionX.interpolate({\n          inputRange: [drawerWidth - 1, drawerWidth, drawerWidth + 1],\n          outputRange: [0, 0, 1]\n        });\n        translationX = Animated.add(dragX, dragOffsetFromOnStartPosition); // TODO: as above\n      }\n\n      this.openValue = Animated.add(translationX, drawerTranslation).interpolate({\n        inputRange: [0, drawerWidth],\n        outputRange: [0, 1],\n        extrapolate: 'clamp'\n      });\n      const gestureOptions = {\n        useNativeDriver: props.useNativeAnimations\n      };\n\n      if (this.props.onDrawerSlide) {\n        gestureOptions.listener = ev => {\n          var _this$props$onDrawerS, _this$props;\n\n          const translationX = Math.floor(Math.abs(ev.nativeEvent.translationX));\n          const position = translationX / this.state.containerWidth;\n          (_this$props$onDrawerS = (_this$props = this.props).onDrawerSlide) === null || _this$props$onDrawerS === void 0 ? void 0 : _this$props$onDrawerS.call(_this$props, position);\n        };\n      }\n\n      this.onGestureEvent = Animated.event([{\n        nativeEvent: {\n          translationX: dragXValue,\n          x: touchXValue\n        }\n      }], gestureOptions);\n    });\n\n    _defineProperty(this, \"handleContainerLayout\", ({\n      nativeEvent\n    }) => {\n      this.setState({\n        containerWidth: nativeEvent.layout.width\n      });\n    });\n\n    _defineProperty(this, \"emitStateChanged\", (newState, drawerWillShow) => {\n      var _this$props$onDrawerS2, _this$props2;\n\n      (_this$props$onDrawerS2 = (_this$props2 = this.props).onDrawerStateChanged) === null || _this$props$onDrawerS2 === void 0 ? void 0 : _this$props$onDrawerS2.call(_this$props2, newState, drawerWillShow);\n    });\n\n    _defineProperty(this, \"openingHandlerStateChange\", ({\n      nativeEvent\n    }) => {\n      if (nativeEvent.oldState === State.ACTIVE) {\n        this.handleRelease({\n          nativeEvent\n        });\n      } else if (nativeEvent.state === State.ACTIVE) {\n        this.emitStateChanged(DRAGGING, false);\n        this.setState({\n          drawerState: DRAGGING\n        });\n\n        if (this.props.keyboardDismissMode === 'on-drag') {\n          Keyboard.dismiss();\n        }\n\n        if (this.props.hideStatusBar) {\n          StatusBar.setHidden(true, this.props.statusBarAnimation || 'slide');\n        }\n      }\n    });\n\n    _defineProperty(this, \"onTapHandlerStateChange\", ({\n      nativeEvent\n    }) => {\n      if (this.drawerShown && nativeEvent.oldState === State.ACTIVE && this.props.drawerLockMode !== 'locked-open') {\n        this.closeDrawer();\n      }\n    });\n\n    _defineProperty(this, \"handleRelease\", ({\n      nativeEvent\n    }) => {\n      const {\n        drawerWidth,\n        drawerPosition,\n        drawerType\n      } = this.props;\n      const {\n        containerWidth\n      } = this.state;\n      let {\n        translationX: dragX,\n        velocityX,\n        x: touchX\n      } = nativeEvent;\n\n      if (drawerPosition !== 'left') {\n        // See description in _updateAnimatedEvent about why events are flipped\n        // for right-side drawer\n        dragX = -dragX;\n        touchX = containerWidth - touchX;\n        velocityX = -velocityX;\n      }\n\n      const gestureStartX = touchX - dragX;\n      let dragOffsetBasedOnStart = 0;\n\n      if (drawerType === 'front') {\n        dragOffsetBasedOnStart = gestureStartX > drawerWidth ? gestureStartX - drawerWidth : 0;\n      }\n\n      const startOffsetX = dragX + dragOffsetBasedOnStart + (this.drawerShown ? drawerWidth : 0);\n      const projOffsetX = startOffsetX + DRAG_TOSS * velocityX;\n      const shouldOpen = projOffsetX > drawerWidth / 2;\n\n      if (shouldOpen) {\n        this.animateDrawer(startOffsetX, drawerWidth, velocityX);\n      } else {\n        this.animateDrawer(startOffsetX, 0, velocityX);\n      }\n    });\n\n    _defineProperty(this, \"updateShowing\", showing => {\n      var _this$accessibilityIs, _this$pointerEventsVi, _this$panGestureHandl;\n\n      this.drawerShown = showing;\n      (_this$accessibilityIs = this.accessibilityIsModalView.current) === null || _this$accessibilityIs === void 0 ? void 0 : _this$accessibilityIs.setNativeProps({\n        accessibilityViewIsModal: showing\n      });\n      (_this$pointerEventsVi = this.pointerEventsView.current) === null || _this$pointerEventsVi === void 0 ? void 0 : _this$pointerEventsVi.setNativeProps({\n        pointerEvents: showing ? 'auto' : 'none'\n      });\n      const {\n        drawerPosition,\n        minSwipeDistance,\n        edgeWidth\n      } = this.props;\n      const fromLeft = drawerPosition === 'left'; // gestureOrientation is 1 if the expected gesture is from left to right and\n      // -1 otherwise e.g. when drawer is on the left and is closed we expect left\n      // to right gesture, thus orientation will be 1.\n\n      const gestureOrientation = (fromLeft ? 1 : -1) * (this.drawerShown ? -1 : 1); // When drawer is closed we want the hitSlop to be horizontally shorter than\n      // the container size by the value of SLOP. This will make it only activate\n      // when gesture happens not further than SLOP away from the edge\n\n      const hitSlop = fromLeft ? {\n        left: 0,\n        width: showing ? undefined : edgeWidth\n      } : {\n        right: 0,\n        width: showing ? undefined : edgeWidth\n      }; // @ts-ignore internal API, maybe could be fixed in handler types\n\n      (_this$panGestureHandl = this.panGestureHandler.current) === null || _this$panGestureHandl === void 0 ? void 0 : _this$panGestureHandl.setNativeProps({\n        hitSlop,\n        activeOffsetX: gestureOrientation * minSwipeDistance\n      });\n    });\n\n    _defineProperty(this, \"animateDrawer\", (fromValue, toValue, velocity, speed) => {\n      this.state.dragX.setValue(0);\n      this.state.touchX.setValue(this.props.drawerPosition === 'left' ? 0 : this.state.containerWidth);\n\n      if (fromValue != null) {\n        let nextFramePosition = fromValue;\n\n        if (this.props.useNativeAnimations) {\n          // When using native driver, we predict the next position of the\n          // animation because it takes one frame of a roundtrip to pass RELEASE\n          // event from native driver to JS before we can start animating. Without\n          // it, it is more noticable that the frame is dropped.\n          if (fromValue < toValue && velocity > 0) {\n            nextFramePosition = Math.min(fromValue + velocity / 60.0, toValue);\n          } else if (fromValue > toValue && velocity < 0) {\n            nextFramePosition = Math.max(fromValue + velocity / 60.0, toValue);\n          }\n        }\n\n        this.state.drawerTranslation.setValue(nextFramePosition);\n      }\n\n      const willShow = toValue !== 0;\n      this.updateShowing(willShow);\n      this.emitStateChanged(SETTLING, willShow);\n      this.setState({\n        drawerState: SETTLING\n      });\n\n      if (this.props.hideStatusBar) {\n        StatusBar.setHidden(willShow, this.props.statusBarAnimation || 'slide');\n      }\n\n      Animated.spring(this.state.drawerTranslation, {\n        velocity,\n        bounciness: 0,\n        toValue,\n        useNativeDriver: this.props.useNativeAnimations,\n        speed: speed !== null && speed !== void 0 ? speed : undefined\n      }).start(({\n        finished\n      }) => {\n        if (finished) {\n          this.emitStateChanged(IDLE, willShow);\n          this.setState({\n            drawerOpened: willShow\n          });\n\n          if (this.state.drawerState !== DRAGGING) {\n            // it's possilbe that user started drag while the drawer\n            // was settling, don't override state in this case\n            this.setState({\n              drawerState: IDLE\n            });\n          }\n\n          if (willShow) {\n            var _this$props$onDrawerO, _this$props3;\n\n            (_this$props$onDrawerO = (_this$props3 = this.props).onDrawerOpen) === null || _this$props$onDrawerO === void 0 ? void 0 : _this$props$onDrawerO.call(_this$props3);\n          } else {\n            var _this$props$onDrawerC, _this$props4;\n\n            (_this$props$onDrawerC = (_this$props4 = this.props).onDrawerClose) === null || _this$props$onDrawerC === void 0 ? void 0 : _this$props$onDrawerC.call(_this$props4);\n          }\n        }\n      });\n    });\n\n    _defineProperty(this, \"openDrawer\", (options = {}) => {\n      this.animateDrawer( // TODO: decide if it should be null or undefined is the proper value\n      undefined, this.props.drawerWidth, options.velocity ? options.velocity : 0, options.speed); // We need to force the update, otherwise the overlay is not rerendered and\n      // it would not be clickable\n\n      this.forceUpdate();\n    });\n\n    _defineProperty(this, \"closeDrawer\", (options = {}) => {\n      // TODO: decide if it should be null or undefined is the proper value\n      this.animateDrawer(undefined, 0, options.velocity ? options.velocity : 0, options.speed); // We need to force the update, otherwise the overlay is not rerendered and\n      // it would be still clickable\n\n      this.forceUpdate();\n    });\n\n    _defineProperty(this, \"renderOverlay\", () => {\n      /* Overlay styles */\n      invariant(this.openValue, 'should be set');\n      let overlayOpacity;\n\n      if (this.state.drawerState !== IDLE) {\n        overlayOpacity = this.openValue;\n      } else {\n        overlayOpacity = this.state.drawerOpened ? 1 : 0;\n      }\n\n      const dynamicOverlayStyles = {\n        opacity: overlayOpacity,\n        backgroundColor: this.props.overlayColor\n      };\n      return /*#__PURE__*/React.createElement(TapGestureHandler, {\n        onHandlerStateChange: this.onTapHandlerStateChange\n      }, /*#__PURE__*/React.createElement(Animated.View, {\n        pointerEvents: this.drawerShown ? 'auto' : 'none',\n        ref: this.pointerEventsView,\n        style: [styles.overlay, dynamicOverlayStyles]\n      }));\n    });\n\n    _defineProperty(this, \"renderDrawer\", () => {\n      const {\n        drawerBackgroundColor,\n        drawerWidth,\n        drawerPosition,\n        drawerType,\n        drawerContainerStyle,\n        contentContainerStyle\n      } = this.props;\n      const fromLeft = drawerPosition === 'left';\n      const drawerSlide = drawerType !== 'back';\n      const containerSlide = drawerType !== 'front'; // we rely on row and row-reverse flex directions to position the drawer\n      // properly. Apparently for RTL these are flipped which requires us to use\n      // the opposite setting for the drawer to appear from left or right\n      // according to the drawerPosition prop\n\n      const reverseContentDirection = I18nManager.isRTL ? fromLeft : !fromLeft;\n      const dynamicDrawerStyles = {\n        backgroundColor: drawerBackgroundColor,\n        width: drawerWidth\n      };\n      const openValue = this.openValue;\n      invariant(openValue, 'should be set');\n      let containerStyles;\n\n      if (containerSlide) {\n        const containerTranslateX = openValue.interpolate({\n          inputRange: [0, 1],\n          outputRange: fromLeft ? [0, drawerWidth] : [0, -drawerWidth],\n          extrapolate: 'clamp'\n        });\n        containerStyles = {\n          transform: [{\n            translateX: containerTranslateX\n          }]\n        };\n      }\n\n      let drawerTranslateX = 0;\n\n      if (drawerSlide) {\n        const closedDrawerOffset = fromLeft ? -drawerWidth : drawerWidth;\n\n        if (this.state.drawerState !== IDLE) {\n          drawerTranslateX = openValue.interpolate({\n            inputRange: [0, 1],\n            outputRange: [closedDrawerOffset, 0],\n            extrapolate: 'clamp'\n          });\n        } else {\n          drawerTranslateX = this.state.drawerOpened ? 0 : closedDrawerOffset;\n        }\n      }\n\n      const drawerStyles = {\n        transform: [{\n          translateX: drawerTranslateX\n        }],\n        flexDirection: reverseContentDirection ? 'row-reverse' : 'row'\n      };\n      return /*#__PURE__*/React.createElement(Animated.View, {\n        style: styles.main,\n        onLayout: this.handleContainerLayout\n      }, /*#__PURE__*/React.createElement(Animated.View, {\n        style: [drawerType === 'front' ? styles.containerOnBack : styles.containerInFront, containerStyles, contentContainerStyle],\n        importantForAccessibility: this.drawerShown ? 'no-hide-descendants' : 'yes'\n      }, typeof this.props.children === 'function' ? this.props.children(this.openValue) : this.props.children, this.renderOverlay()), /*#__PURE__*/React.createElement(Animated.View, {\n        pointerEvents: \"box-none\",\n        ref: this.accessibilityIsModalView,\n        accessibilityViewIsModal: this.drawerShown,\n        style: [styles.drawerContainer, drawerStyles, drawerContainerStyle]\n      }, /*#__PURE__*/React.createElement(View, {\n        style: dynamicDrawerStyles\n      }, this.props.renderNavigationView(this.openValue))));\n    });\n\n    _defineProperty(this, \"setPanGestureRef\", ref => {\n      var _this$props$onGesture, _this$props5;\n\n      // TODO(TS): make sure it is OK taken from\n      // https://github.com/DefinitelyTyped/DefinitelyTyped/issues/31065#issuecomment-596081842\n      this.panGestureHandler.current = ref;\n      (_this$props$onGesture = (_this$props5 = this.props).onGestureRef) === null || _this$props$onGesture === void 0 ? void 0 : _this$props$onGesture.call(_this$props5, ref);\n    });\n\n    const _dragX = new Animated.Value(0);\n\n    const _touchX = new Animated.Value(0);\n\n    const _drawerTranslation = new Animated.Value(0);\n\n    this.state = {\n      dragX: _dragX,\n      touchX: _touchX,\n      drawerTranslation: _drawerTranslation,\n      containerWidth: 0,\n      drawerState: IDLE,\n      drawerOpened: false\n    };\n    this.updateAnimatedEvent(_props, this.state);\n  }\n\n  UNSAFE_componentWillUpdate(props, state) {\n    if (this.props.drawerPosition !== props.drawerPosition || this.props.drawerWidth !== props.drawerWidth || this.props.drawerType !== props.drawerType || this.state.containerWidth !== state.containerWidth) {\n      this.updateAnimatedEvent(props, state);\n    }\n  }\n\n  render() {\n    const {\n      drawerPosition,\n      drawerLockMode,\n      edgeWidth,\n      minSwipeDistance\n    } = this.props;\n    const fromLeft = drawerPosition === 'left'; // gestureOrientation is 1 if the expected gesture is from left to right and\n    // -1 otherwise e.g. when drawer is on the left and is closed we expect left\n    // to right gesture, thus orientation will be 1.\n\n    const gestureOrientation = (fromLeft ? 1 : -1) * (this.drawerShown ? -1 : 1); // When drawer is closed we want the hitSlop to be horizontally shorter than\n    // the container size by the value of SLOP. This will make it only activate\n    // when gesture happens not further than SLOP away from the edge\n\n    const hitSlop = fromLeft ? {\n      left: 0,\n      width: this.drawerShown ? undefined : edgeWidth\n    } : {\n      right: 0,\n      width: this.drawerShown ? undefined : edgeWidth\n    };\n    return /*#__PURE__*/React.createElement(PanGestureHandler // @ts-ignore could be fixed in handler types\n    , {\n      ref: this.setPanGestureRef,\n      hitSlop: hitSlop,\n      activeOffsetX: gestureOrientation * minSwipeDistance,\n      failOffsetY: [-15, 15],\n      onGestureEvent: this.onGestureEvent,\n      onHandlerStateChange: this.openingHandlerStateChange,\n      enableTrackpadTwoFingerGesture: this.props.enableTrackpadTwoFingerGesture,\n      enabled: drawerLockMode !== 'locked-closed' && drawerLockMode !== 'locked-open'\n    }, this.renderDrawer());\n  }\n\n}\n\n_defineProperty(DrawerLayout, \"defaultProps\", {\n  drawerWidth: 200,\n  drawerPosition: 'left',\n  useNativeAnimations: true,\n  drawerType: 'front',\n  edgeWidth: 20,\n  minSwipeDistance: 3,\n  overlayColor: 'rgba(0, 0, 0, 0.7)',\n  drawerLockMode: 'unlocked',\n  enableTrackpadTwoFingerGesture: false\n});\n\n_defineProperty(DrawerLayout, \"positions\", {\n  Left: 'left',\n  Right: 'right'\n});\n\nconst styles = StyleSheet.create({\n  drawerContainer: { ...StyleSheet.absoluteFillObject,\n    zIndex: 1001,\n    flexDirection: 'row'\n  },\n  containerInFront: { ...StyleSheet.absoluteFillObject,\n    zIndex: 1002\n  },\n  containerOnBack: { ...StyleSheet.absoluteFillObject\n  },\n  main: {\n    flex: 1,\n    zIndex: 0,\n    overflow: 'hidden'\n  },\n  overlay: { ...StyleSheet.absoluteFillObject,\n    zIndex: 1000\n  }\n});\n//# sourceMappingURL=DrawerLayout.js.map"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
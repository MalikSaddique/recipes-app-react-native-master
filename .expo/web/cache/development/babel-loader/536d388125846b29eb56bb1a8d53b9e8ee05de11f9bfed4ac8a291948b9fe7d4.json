{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _defineProperty2 from \"@babel/runtime/helpers/defineProperty\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nvar _excluded = [\"enabled\"];\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty2(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nfunction _createForOfIteratorHelperLoose(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (it) return (it = it.call(o)).next.bind(it); if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; return function () { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\nimport Hammer from '@egjs/hammerjs';\nimport findNodeHandle from \"react-native-web/dist/exports/findNodeHandle\";\nimport { State } from \"../State\";\nimport { EventMap } from \"./constants\";\nimport * as NodeManager from \"./NodeManager\";\nvar gestureInstances = 0;\nvar GestureHandler = function () {\n  function GestureHandler() {\n    var _this = this;\n    _classCallCheck(this, GestureHandler);\n    _defineProperty(this, \"handlerTag\", void 0);\n    _defineProperty(this, \"isGestureRunning\", false);\n    _defineProperty(this, \"view\", null);\n    _defineProperty(this, \"hasCustomActivationCriteria\", void 0);\n    _defineProperty(this, \"hasGestureFailed\", false);\n    _defineProperty(this, \"hammer\", null);\n    _defineProperty(this, \"initialRotation\", null);\n    _defineProperty(this, \"__initialX\", void 0);\n    _defineProperty(this, \"__initialY\", void 0);\n    _defineProperty(this, \"config\", {});\n    _defineProperty(this, \"previousState\", State.UNDETERMINED);\n    _defineProperty(this, \"pendingGestures\", {});\n    _defineProperty(this, \"oldState\", State.UNDETERMINED);\n    _defineProperty(this, \"lastSentState\", null);\n    _defineProperty(this, \"gestureInstance\", void 0);\n    _defineProperty(this, \"_stillWaiting\", void 0);\n    _defineProperty(this, \"propsRef\", void 0);\n    _defineProperty(this, \"ref\", void 0);\n    _defineProperty(this, \"clearSelfAsPending\", function () {\n      if (Array.isArray(_this.config.waitFor)) {\n        for (var _iterator = _createForOfIteratorHelperLoose(_this.config.waitFor), _step; !(_step = _iterator()).done;) {\n          var gesture = _step.value;\n          gesture.removePendingGesture(_this.id);\n        }\n      }\n    });\n    _defineProperty(this, \"destroy\", function () {\n      _this.clearSelfAsPending();\n      if (_this.hammer) {\n        _this.hammer.stop(false);\n        _this.hammer.destroy();\n      }\n      _this.hammer = null;\n    });\n    _defineProperty(this, \"isPointInView\", function (_ref) {\n      var x = _ref.x,\n        y = _ref.y;\n      var rect = _this.view.getBoundingClientRect();\n      var pointerInside = x >= rect.left && x <= rect.right && y >= rect.top && y <= rect.bottom;\n      return pointerInside;\n    });\n    _defineProperty(this, \"sendEvent\", function (nativeEvent) {\n      var _this$propsRef$curren = _this.propsRef.current,\n        onGestureHandlerEvent = _this$propsRef$curren.onGestureHandlerEvent,\n        onGestureHandlerStateChange = _this$propsRef$curren.onGestureHandlerStateChange;\n      var event = _this.transformEventData(nativeEvent);\n      invokeNullableMethod(onGestureHandlerEvent, event);\n      if (_this.lastSentState !== event.nativeEvent.state) {\n        _this.lastSentState = event.nativeEvent.state;\n        invokeNullableMethod(onGestureHandlerStateChange, event);\n      }\n    });\n    _defineProperty(this, \"sync\", function () {\n      var gesture = _this.hammer.get(_this.name);\n      if (!gesture) return;\n      var enable = function enable(recognizer, inputData) {\n        if (!_this.config.enabled) {\n          _this.isGestureRunning = false;\n          _this.hasGestureFailed = false;\n          return false;\n        }\n        if (!inputData || !recognizer.options || typeof inputData.maxPointers === 'undefined') {\n          return _this.shouldEnableGestureOnSetup;\n        }\n        if (_this.hasGestureFailed) {\n          return false;\n        }\n        if (!_this.isDiscrete) {\n          if (_this.isGestureRunning) {\n            return true;\n          }\n          _this._stillWaiting = _this._getPendingGestures();\n          if (_this._stillWaiting.length) {\n            for (var _iterator2 = _createForOfIteratorHelperLoose(_this._stillWaiting), _step2; !(_step2 = _iterator2()).done;) {\n              var _gesture2 = _step2.value;\n              if (!_gesture2.isDiscrete && _gesture2.isGestureRunning) {\n                _this.hasGestureFailed = true;\n                _this.isGestureRunning = false;\n                return false;\n              }\n            }\n            return false;\n          }\n        }\n        if (!_this.hasCustomActivationCriteria) {\n          return true;\n        }\n        var deltaRotation = _this.initialRotation == null ? 0 : inputData.rotation - _this.initialRotation;\n        var _this$isGestureEnable = _this.isGestureEnabledForEvent(_this.getConfig(), recognizer, _objectSpread(_objectSpread({}, inputData), {}, {\n            deltaRotation: deltaRotation\n          })),\n          success = _this$isGestureEnable.success,\n          failed = _this$isGestureEnable.failed;\n        if (failed) {\n          _this.simulateCancelEvent(inputData);\n          _this.hasGestureFailed = true;\n        }\n        return success;\n      };\n      var params = _this.getHammerConfig();\n      gesture.set(_objectSpread(_objectSpread({}, params), {}, {\n        enable: enable\n      }));\n    });\n    this.gestureInstance = gestureInstances++;\n    this.hasCustomActivationCriteria = false;\n  }\n  _createClass(GestureHandler, [{\n    key: \"id\",\n    get: function get() {\n      return \"\" + this.name + this.gestureInstance;\n    }\n  }, {\n    key: \"isDiscrete\",\n    get: function get() {\n      return false;\n    }\n  }, {\n    key: \"shouldEnableGestureOnSetup\",\n    get: function get() {\n      throw new Error('Must override GestureHandler.shouldEnableGestureOnSetup');\n    }\n  }, {\n    key: \"getConfig\",\n    value: function getConfig() {\n      return this.config;\n    }\n  }, {\n    key: \"onWaitingEnded\",\n    value: function onWaitingEnded(_gesture) {}\n  }, {\n    key: \"removePendingGesture\",\n    value: function removePendingGesture(id) {\n      delete this.pendingGestures[id];\n    }\n  }, {\n    key: \"addPendingGesture\",\n    value: function addPendingGesture(gesture) {\n      this.pendingGestures[gesture.id] = gesture;\n    }\n  }, {\n    key: \"isGestureEnabledForEvent\",\n    value: function isGestureEnabledForEvent(_config, _recognizer, _event) {\n      return {\n        success: true\n      };\n    }\n  }, {\n    key: \"NativeGestureClass\",\n    get: function get() {\n      throw new Error('Must override GestureHandler.NativeGestureClass');\n    }\n  }, {\n    key: \"updateHasCustomActivationCriteria\",\n    value: function updateHasCustomActivationCriteria(_config) {\n      return true;\n    }\n  }, {\n    key: \"updateGestureConfig\",\n    value: function updateGestureConfig(_ref2) {\n      var _ref2$enabled = _ref2.enabled,\n        enabled = _ref2$enabled === void 0 ? true : _ref2$enabled,\n        props = _objectWithoutProperties(_ref2, _excluded);\n      this.clearSelfAsPending();\n      this.config = ensureConfig(_objectSpread({\n        enabled: enabled\n      }, props));\n      this.hasCustomActivationCriteria = this.updateHasCustomActivationCriteria(this.config);\n      if (Array.isArray(this.config.waitFor)) {\n        for (var _iterator3 = _createForOfIteratorHelperLoose(this.config.waitFor), _step3; !(_step3 = _iterator3()).done;) {\n          var gesture = _step3.value;\n          gesture.addPendingGesture(this);\n        }\n      }\n      if (this.hammer) {\n        this.sync();\n      }\n      return this.config;\n    }\n  }, {\n    key: \"getState\",\n    value: function getState(type) {\n      if (type == 0) {\n        return 0;\n      }\n      return EventMap[type];\n    }\n  }, {\n    key: \"transformEventData\",\n    value: function transformEventData(event) {\n      var eventType = event.eventType,\n        numberOfPointers = event.maxPointers;\n      var changedTouch = event.changedPointers[0];\n      var pointerInside = this.isPointInView({\n        x: changedTouch.clientX,\n        y: changedTouch.clientY\n      });\n      var state = this.getState(eventType);\n      if (state !== this.previousState) {\n        this.oldState = this.previousState;\n        this.previousState = state;\n      }\n      return {\n        nativeEvent: _objectSpread(_objectSpread({\n          numberOfPointers: numberOfPointers,\n          state: state,\n          pointerInside: pointerInside\n        }, this.transformNativeEvent(event)), {}, {\n          handlerTag: this.handlerTag,\n          target: this.ref,\n          oldState: state !== this.previousState || state != 4 ? this.oldState : undefined\n        }),\n        timeStamp: Date.now()\n      };\n    }\n  }, {\n    key: \"transformNativeEvent\",\n    value: function transformNativeEvent(_event) {\n      return {};\n    }\n  }, {\n    key: \"cancelPendingGestures\",\n    value: function cancelPendingGestures(event) {\n      for (var _i = 0, _Object$values = Object.values(this.pendingGestures); _i < _Object$values.length; _i++) {\n        var gesture = _Object$values[_i];\n        if (gesture && gesture.isGestureRunning) {\n          gesture.hasGestureFailed = true;\n          gesture.cancelEvent(event);\n        }\n      }\n    }\n  }, {\n    key: \"notifyPendingGestures\",\n    value: function notifyPendingGestures() {\n      for (var _i2 = 0, _Object$values2 = Object.values(this.pendingGestures); _i2 < _Object$values2.length; _i2++) {\n        var gesture = _Object$values2[_i2];\n        if (gesture) {\n          gesture.onWaitingEnded(this);\n        }\n      }\n    }\n  }, {\n    key: \"onGestureEnded\",\n    value: function onGestureEnded(event) {\n      this.isGestureRunning = false;\n      this.cancelPendingGestures(event);\n    }\n  }, {\n    key: \"forceInvalidate\",\n    value: function forceInvalidate(event) {\n      if (this.isGestureRunning) {\n        this.hasGestureFailed = true;\n        this.cancelEvent(event);\n      }\n    }\n  }, {\n    key: \"cancelEvent\",\n    value: function cancelEvent(event) {\n      this.notifyPendingGestures();\n      this.sendEvent(_objectSpread(_objectSpread({}, event), {}, {\n        eventType: Hammer.INPUT_CANCEL,\n        isFinal: true\n      }));\n      this.onGestureEnded(event);\n    }\n  }, {\n    key: \"onRawEvent\",\n    value: function onRawEvent(_ref3) {\n      var isFirst = _ref3.isFirst;\n      if (isFirst) {\n        this.hasGestureFailed = false;\n      }\n    }\n  }, {\n    key: \"setView\",\n    value: function setView(ref, propsRef) {\n      var _this2 = this;\n      if (ref == null) {\n        this.destroy();\n        this.view = null;\n        return;\n      }\n      this.propsRef = propsRef;\n      this.ref = ref;\n      this.view = findNodeHandle(ref);\n      this.hammer = new Hammer.Manager(this.view);\n      this.oldState = State.UNDETERMINED;\n      this.previousState = State.UNDETERMINED;\n      this.lastSentState = null;\n      var NativeGestureClass = this.NativeGestureClass;\n      var gesture = new NativeGestureClass(this.getHammerConfig());\n      this.hammer.add(gesture);\n      this.hammer.on('hammer.input', function (ev) {\n        if (!_this2.config.enabled) {\n          _this2.hasGestureFailed = false;\n          _this2.isGestureRunning = false;\n          return;\n        }\n        _this2.onRawEvent(ev);\n        if (_this2.initialRotation === null && ev.rotation !== 0) {\n          _this2.initialRotation = ev.rotation;\n        }\n        if (ev.isFinal) {\n          setTimeout(function () {\n            _this2.initialRotation = null;\n            _this2.hasGestureFailed = false;\n          });\n        }\n      });\n      this.setupEvents();\n      this.sync();\n    }\n  }, {\n    key: \"setupEvents\",\n    value: function setupEvents() {\n      var _this3 = this;\n      if (!this.isDiscrete) {\n        this.hammer.on(this.name + \"start\", function (event) {\n          return _this3.onStart(event);\n        });\n        this.hammer.on(this.name + \"end \" + this.name + \"cancel\", function (event) {\n          _this3.onGestureEnded(event);\n        });\n      }\n      this.hammer.on(this.name, function (ev) {\n        return _this3.onGestureActivated(ev);\n      });\n    }\n  }, {\n    key: \"onStart\",\n    value: function onStart(_ref4) {\n      var deltaX = _ref4.deltaX,\n        deltaY = _ref4.deltaY,\n        rotation = _ref4.rotation;\n      this.oldState = State.UNDETERMINED;\n      this.previousState = State.UNDETERMINED;\n      this.lastSentState = null;\n      this.isGestureRunning = true;\n      this.__initialX = deltaX;\n      this.__initialY = deltaY;\n      this.initialRotation = rotation;\n    }\n  }, {\n    key: \"onGestureActivated\",\n    value: function onGestureActivated(ev) {\n      this.sendEvent(ev);\n    }\n  }, {\n    key: \"onSuccess\",\n    value: function onSuccess() {}\n  }, {\n    key: \"_getPendingGestures\",\n    value: function _getPendingGestures() {\n      if (Array.isArray(this.config.waitFor) && this.config.waitFor.length) {\n        var stillWaiting = this.config.waitFor.filter(function (_ref5) {\n          var hasGestureFailed = _ref5.hasGestureFailed;\n          return hasGestureFailed === false;\n        });\n        return stillWaiting;\n      }\n      return [];\n    }\n  }, {\n    key: \"getHammerConfig\",\n    value: function getHammerConfig() {\n      var pointers = this.config.minPointers === this.config.maxPointers ? this.config.minPointers : 0;\n      return {\n        pointers: pointers\n      };\n    }\n  }, {\n    key: \"simulateCancelEvent\",\n    value: function simulateCancelEvent(_inputData) {}\n  }]);\n  return GestureHandler;\n}();\nfunction invokeNullableMethod(method, event) {\n  if (method) {\n    if (typeof method === 'function') {\n      method(event);\n    } else {\n      if ('__getHandler' in method && typeof method.__getHandler === 'function') {\n        var handler = method.__getHandler();\n        invokeNullableMethod(handler, event);\n      } else {\n        if ('__nodeConfig' in method) {\n          var argMapping = method.__nodeConfig.argMapping;\n          if (Array.isArray(argMapping)) {\n            for (var _iterator4 = _createForOfIteratorHelperLoose(argMapping.entries()), _step4; !(_step4 = _iterator4()).done;) {\n              var _ref6 = _step4.value;\n              var _ref7 = _slicedToArray(_ref6, 2);\n              var index = _ref7[0];\n              var _ref7$ = _slicedToArray(_ref7[1], 2);\n              var key = _ref7$[0];\n              var value = _ref7$[1];\n              if (key in event.nativeEvent) {\n                var nativeValue = event.nativeEvent[key];\n                if (value && value.setValue) {\n                  value.setValue(nativeValue);\n                } else {\n                  method.__nodeConfig.argMapping[index] = [key, nativeValue];\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}\nfunction ensureConfig(config) {\n  var props = _objectSpread({}, config);\n  if ('minDist' in config) {\n    props.minDist = config.minDist;\n    props.minDistSq = props.minDist * props.minDist;\n  }\n  if ('minVelocity' in config) {\n    props.minVelocity = config.minVelocity;\n    props.minVelocitySq = props.minVelocity * props.minVelocity;\n  }\n  if ('maxDist' in config) {\n    props.maxDist = config.maxDist;\n    props.maxDistSq = config.maxDist * config.maxDist;\n  }\n  if ('waitFor' in config) {\n    props.waitFor = asArray(config.waitFor).map(function (_ref8) {\n      var handlerTag = _ref8.handlerTag;\n      return NodeManager.getHandler(handlerTag);\n    }).filter(function (v) {\n      return v;\n    });\n  } else {\n    props.waitFor = null;\n  }\n  var configProps = ['minPointers', 'maxPointers', 'minDist', 'maxDist', 'maxDistSq', 'minVelocitySq', 'minDistSq', 'minVelocity', 'failOffsetXStart', 'failOffsetYStart', 'failOffsetXEnd', 'failOffsetYEnd', 'activeOffsetXStart', 'activeOffsetXEnd', 'activeOffsetYStart', 'activeOffsetYEnd'];\n  configProps.forEach(function (prop) {\n    if (typeof props[prop] === 'undefined') {\n      props[prop] = Number.NaN;\n    }\n  });\n  return props;\n}\nfunction asArray(value) {\n  return value == null ? [] : Array.isArray(value) ? value : [value];\n}\nexport default GestureHandler;","map":{"version":3,"names":["_defineProperty","obj","key","value","Object","defineProperty","enumerable","configurable","writable","Hammer","findNodeHandle","State","EventMap","NodeManager","gestureInstances","GestureHandler","_this","_classCallCheck","UNDETERMINED","Array","isArray","config","waitFor","_iterator","_createForOfIteratorHelperLoose","_step","done","gesture","removePendingGesture","id","clearSelfAsPending","hammer","stop","destroy","_ref","x","y","rect","view","getBoundingClientRect","pointerInside","left","right","top","bottom","nativeEvent","_this$propsRef$curren","propsRef","current","onGestureHandlerEvent","onGestureHandlerStateChange","event","transformEventData","invokeNullableMethod","lastSentState","state","get","name","enable","recognizer","inputData","enabled","isGestureRunning","hasGestureFailed","options","maxPointers","shouldEnableGestureOnSetup","isDiscrete","_stillWaiting","_getPendingGestures","length","_iterator2","_step2","hasCustomActivationCriteria","deltaRotation","initialRotation","rotation","_this$isGestureEnable","isGestureEnabledForEvent","getConfig","_objectSpread","success","failed","simulateCancelEvent","params","getHammerConfig","set","gestureInstance","_createClass","Error","onWaitingEnded","_gesture","pendingGestures","addPendingGesture","_config","_recognizer","_event","updateHasCustomActivationCriteria","updateGestureConfig","_ref2","_ref2$enabled","props","_objectWithoutProperties","_excluded","ensureConfig","_iterator3","_step3","sync","getState","type","eventType","numberOfPointers","changedTouch","changedPointers","isPointInView","clientX","clientY","previousState","oldState","transformNativeEvent","handlerTag","target","ref","undefined","timeStamp","Date","now","cancelPendingGestures","_i","_Object$values","values","cancelEvent","notifyPendingGestures","_i2","_Object$values2","onGestureEnded","forceInvalidate","sendEvent","INPUT_CANCEL","isFinal","onRawEvent","_ref3","isFirst","setView","_this2","Manager","NativeGestureClass","add","on","ev","setTimeout","setupEvents","_this3","onStart","onGestureActivated","_ref4","deltaX","deltaY","__initialX","__initialY","onSuccess","stillWaiting","filter","_ref5","pointers","minPointers","_inputData","method","__getHandler","handler","argMapping","__nodeConfig","_iterator4","entries","_step4","_ref6","_ref7","_slicedToArray","index","_ref7$","nativeValue","setValue","minDist","minDistSq","minVelocity","minVelocitySq","maxDist","maxDistSq","asArray","map","_ref8","getHandler","v","configProps","forEach","prop","Number","NaN"],"sources":["C:/Users/A S Computer/recipes-app-react-native-master/node_modules/react-native-gesture-handler/lib/module/web/GestureHandler.js"],"sourcesContent":["function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n/* eslint-disable eslint-comments/no-unlimited-disable */\n\n/* eslint-disable */\nimport Hammer from '@egjs/hammerjs';\nimport { findNodeHandle } from 'react-native';\nimport { State } from '../State';\nimport { EventMap } from './constants';\nimport * as NodeManager from './NodeManager'; // TODO(TS) Replace with HammerInput if https://github.com/DefinitelyTyped/DefinitelyTyped/pull/50438/files is merged\n\nlet gestureInstances = 0;\n\nclass GestureHandler {\n  get id() {\n    return `${this.name}${this.gestureInstance}`;\n  }\n\n  get isDiscrete() {\n    return false;\n  }\n\n  get shouldEnableGestureOnSetup() {\n    throw new Error('Must override GestureHandler.shouldEnableGestureOnSetup');\n  }\n\n  constructor() {\n    _defineProperty(this, \"handlerTag\", void 0);\n\n    _defineProperty(this, \"isGestureRunning\", false);\n\n    _defineProperty(this, \"view\", null);\n\n    _defineProperty(this, \"hasCustomActivationCriteria\", void 0);\n\n    _defineProperty(this, \"hasGestureFailed\", false);\n\n    _defineProperty(this, \"hammer\", null);\n\n    _defineProperty(this, \"initialRotation\", null);\n\n    _defineProperty(this, \"__initialX\", void 0);\n\n    _defineProperty(this, \"__initialY\", void 0);\n\n    _defineProperty(this, \"config\", {});\n\n    _defineProperty(this, \"previousState\", State.UNDETERMINED);\n\n    _defineProperty(this, \"pendingGestures\", {});\n\n    _defineProperty(this, \"oldState\", State.UNDETERMINED);\n\n    _defineProperty(this, \"lastSentState\", null);\n\n    _defineProperty(this, \"gestureInstance\", void 0);\n\n    _defineProperty(this, \"_stillWaiting\", void 0);\n\n    _defineProperty(this, \"propsRef\", void 0);\n\n    _defineProperty(this, \"ref\", void 0);\n\n    _defineProperty(this, \"clearSelfAsPending\", () => {\n      if (Array.isArray(this.config.waitFor)) {\n        for (const gesture of this.config.waitFor) {\n          gesture.removePendingGesture(this.id);\n        }\n      }\n    });\n\n    _defineProperty(this, \"destroy\", () => {\n      this.clearSelfAsPending();\n\n      if (this.hammer) {\n        this.hammer.stop(false);\n        this.hammer.destroy();\n      }\n\n      this.hammer = null;\n    });\n\n    _defineProperty(this, \"isPointInView\", ({\n      x,\n      y\n    }) => {\n      // @ts-ignore FIXME(TS)\n      const rect = this.view.getBoundingClientRect();\n      const pointerInside = x >= rect.left && x <= rect.right && y >= rect.top && y <= rect.bottom;\n      return pointerInside;\n    });\n\n    _defineProperty(this, \"sendEvent\", nativeEvent => {\n      const {\n        onGestureHandlerEvent,\n        onGestureHandlerStateChange\n      } = this.propsRef.current;\n      const event = this.transformEventData(nativeEvent);\n      invokeNullableMethod(onGestureHandlerEvent, event);\n\n      if (this.lastSentState !== event.nativeEvent.state) {\n        this.lastSentState = event.nativeEvent.state;\n        invokeNullableMethod(onGestureHandlerStateChange, event);\n      }\n    });\n\n    _defineProperty(this, \"sync\", () => {\n      const gesture = this.hammer.get(this.name);\n      if (!gesture) return;\n\n      const enable = (recognizer, inputData) => {\n        if (!this.config.enabled) {\n          this.isGestureRunning = false;\n          this.hasGestureFailed = false;\n          return false;\n        } // Prevent events before the system is ready.\n\n\n        if (!inputData || !recognizer.options || typeof inputData.maxPointers === 'undefined') {\n          return this.shouldEnableGestureOnSetup;\n        }\n\n        if (this.hasGestureFailed) {\n          return false;\n        }\n\n        if (!this.isDiscrete) {\n          if (this.isGestureRunning) {\n            return true;\n          } // The built-in hammer.js \"waitFor\" doesn't work across multiple views.\n          // Only process if there are views to wait for.\n\n\n          this._stillWaiting = this._getPendingGestures(); // This gesture should continue waiting.\n\n          if (this._stillWaiting.length) {\n            // Check to see if one of the gestures you're waiting for has started.\n            // If it has then the gesture should fail.\n            for (const gesture of this._stillWaiting) {\n              // When the target gesture has started, this gesture must force fail.\n              if (!gesture.isDiscrete && gesture.isGestureRunning) {\n                this.hasGestureFailed = true;\n                this.isGestureRunning = false;\n                return false;\n              }\n            } // This gesture shouldn't start until the others have finished.\n\n\n            return false;\n          }\n        } // Use default behaviour\n\n\n        if (!this.hasCustomActivationCriteria) {\n          return true;\n        }\n\n        const deltaRotation = this.initialRotation == null ? 0 : inputData.rotation - this.initialRotation; // @ts-ignore FIXME(TS)\n\n        const {\n          success,\n          failed\n        } = this.isGestureEnabledForEvent(this.getConfig(), recognizer, { ...inputData,\n          deltaRotation\n        });\n\n        if (failed) {\n          this.simulateCancelEvent(inputData);\n          this.hasGestureFailed = true;\n        }\n\n        return success;\n      };\n\n      const params = this.getHammerConfig(); // @ts-ignore FIXME(TS)\n\n      gesture.set({ ...params,\n        enable\n      });\n    });\n\n    this.gestureInstance = gestureInstances++;\n    this.hasCustomActivationCriteria = false;\n  }\n\n  getConfig() {\n    return this.config;\n  }\n\n  onWaitingEnded(_gesture) {}\n\n  removePendingGesture(id) {\n    delete this.pendingGestures[id];\n  }\n\n  addPendingGesture(gesture) {\n    this.pendingGestures[gesture.id] = gesture;\n  }\n\n  isGestureEnabledForEvent(_config, _recognizer, _event) {\n    return {\n      success: true\n    };\n  }\n\n  get NativeGestureClass() {\n    throw new Error('Must override GestureHandler.NativeGestureClass');\n  }\n\n  updateHasCustomActivationCriteria(_config) {\n    return true;\n  }\n\n  updateGestureConfig({\n    enabled = true,\n    ...props\n  }) {\n    this.clearSelfAsPending();\n    this.config = ensureConfig({\n      enabled,\n      ...props\n    });\n    this.hasCustomActivationCriteria = this.updateHasCustomActivationCriteria(this.config);\n\n    if (Array.isArray(this.config.waitFor)) {\n      for (const gesture of this.config.waitFor) {\n        gesture.addPendingGesture(this);\n      }\n    }\n\n    if (this.hammer) {\n      this.sync();\n    }\n\n    return this.config;\n  }\n\n  getState(type) {\n    // @ts-ignore TODO(TS) check if this is needed\n    if (type == 0) {\n      return 0;\n    }\n\n    return EventMap[type];\n  }\n\n  transformEventData(event) {\n    const {\n      eventType,\n      maxPointers: numberOfPointers\n    } = event; // const direction = DirectionMap[ev.direction];\n\n    const changedTouch = event.changedPointers[0];\n    const pointerInside = this.isPointInView({\n      x: changedTouch.clientX,\n      y: changedTouch.clientY\n    }); // TODO(TS) Remove cast after https://github.com/DefinitelyTyped/DefinitelyTyped/pull/50966 is merged.\n\n    const state = this.getState(eventType);\n\n    if (state !== this.previousState) {\n      this.oldState = this.previousState;\n      this.previousState = state;\n    }\n\n    return {\n      nativeEvent: {\n        numberOfPointers,\n        state,\n        pointerInside,\n        ...this.transformNativeEvent(event),\n        // onHandlerStateChange only\n        handlerTag: this.handlerTag,\n        target: this.ref,\n        // send oldState only when the state was changed, or is different than ACTIVE\n        // GestureDetector relies on the presence of `oldState` to differentiate between\n        // update events and state change events\n        oldState: state !== this.previousState || state != 4 ? this.oldState : undefined\n      },\n      timeStamp: Date.now()\n    };\n  }\n\n  transformNativeEvent(_event) {\n    return {};\n  }\n\n  cancelPendingGestures(event) {\n    for (const gesture of Object.values(this.pendingGestures)) {\n      if (gesture && gesture.isGestureRunning) {\n        gesture.hasGestureFailed = true;\n        gesture.cancelEvent(event);\n      }\n    }\n  }\n\n  notifyPendingGestures() {\n    for (const gesture of Object.values(this.pendingGestures)) {\n      if (gesture) {\n        gesture.onWaitingEnded(this);\n      }\n    }\n  } // FIXME event is undefined in runtime when firstly invoked (see Draggable example), check other functions taking event as input\n\n\n  onGestureEnded(event) {\n    this.isGestureRunning = false;\n    this.cancelPendingGestures(event);\n  }\n\n  forceInvalidate(event) {\n    if (this.isGestureRunning) {\n      this.hasGestureFailed = true;\n      this.cancelEvent(event);\n    }\n  }\n\n  cancelEvent(event) {\n    this.notifyPendingGestures();\n    this.sendEvent({ ...event,\n      eventType: Hammer.INPUT_CANCEL,\n      isFinal: true\n    });\n    this.onGestureEnded(event);\n  }\n\n  onRawEvent({\n    isFirst\n  }) {\n    if (isFirst) {\n      this.hasGestureFailed = false;\n    }\n  }\n\n  setView(ref, propsRef) {\n    if (ref == null) {\n      this.destroy();\n      this.view = null;\n      return;\n    }\n\n    this.propsRef = propsRef;\n    this.ref = ref;\n    this.view = findNodeHandle(ref);\n    this.hammer = new Hammer.Manager(this.view);\n    this.oldState = State.UNDETERMINED;\n    this.previousState = State.UNDETERMINED;\n    this.lastSentState = null;\n    const {\n      NativeGestureClass\n    } = this; // @ts-ignore TODO(TS)\n\n    const gesture = new NativeGestureClass(this.getHammerConfig());\n    this.hammer.add(gesture);\n    this.hammer.on('hammer.input', ev => {\n      if (!this.config.enabled) {\n        this.hasGestureFailed = false;\n        this.isGestureRunning = false;\n        return;\n      }\n\n      this.onRawEvent(ev); // TODO: Bacon: Check against something other than null\n      // The isFirst value is not called when the first rotation is calculated.\n\n      if (this.initialRotation === null && ev.rotation !== 0) {\n        this.initialRotation = ev.rotation;\n      }\n\n      if (ev.isFinal) {\n        // in favor of a willFail otherwise the last frame of the gesture will be captured.\n        setTimeout(() => {\n          this.initialRotation = null;\n          this.hasGestureFailed = false;\n        });\n      }\n    });\n    this.setupEvents();\n    this.sync();\n  }\n\n  setupEvents() {\n    // TODO(TS) Hammer types aren't exactly that what we get in runtime\n    if (!this.isDiscrete) {\n      this.hammer.on(`${this.name}start`, event => this.onStart(event));\n      this.hammer.on(`${this.name}end ${this.name}cancel`, event => {\n        this.onGestureEnded(event);\n      });\n    }\n\n    this.hammer.on(this.name, ev => this.onGestureActivated(ev)); // TODO(TS) remove cast after https://github.com/DefinitelyTyped/DefinitelyTyped/pull/50438 is merged\n  }\n\n  onStart({\n    deltaX,\n    deltaY,\n    rotation\n  }) {\n    // Reset the state for the next gesture\n    this.oldState = State.UNDETERMINED;\n    this.previousState = State.UNDETERMINED;\n    this.lastSentState = null;\n    this.isGestureRunning = true;\n    this.__initialX = deltaX;\n    this.__initialY = deltaY;\n    this.initialRotation = rotation;\n  }\n\n  onGestureActivated(ev) {\n    this.sendEvent(ev);\n  }\n\n  onSuccess() {}\n\n  _getPendingGestures() {\n    if (Array.isArray(this.config.waitFor) && this.config.waitFor.length) {\n      // Get the list of gestures that this gesture is still waiting for.\n      // Use `=== false` in case a ref that isn't a gesture handler is used.\n      const stillWaiting = this.config.waitFor.filter(({\n        hasGestureFailed\n      }) => hasGestureFailed === false);\n      return stillWaiting;\n    }\n\n    return [];\n  }\n\n  getHammerConfig() {\n    const pointers = this.config.minPointers === this.config.maxPointers ? this.config.minPointers : 0;\n    return {\n      pointers\n    };\n  }\n\n  simulateCancelEvent(_inputData) {}\n\n} // TODO(TS) investigate this method\n// Used for sending data to a callback or AnimatedEvent\n\n\nfunction invokeNullableMethod(method, event) {\n  if (method) {\n    if (typeof method === 'function') {\n      method(event);\n    } else {\n      // For use with reanimated's AnimatedEvent\n      if ('__getHandler' in method && typeof method.__getHandler === 'function') {\n        const handler = method.__getHandler();\n\n        invokeNullableMethod(handler, event);\n      } else {\n        if ('__nodeConfig' in method) {\n          const {\n            argMapping\n          } = method.__nodeConfig;\n\n          if (Array.isArray(argMapping)) {\n            for (const [index, [key, value]] of argMapping.entries()) {\n              if (key in event.nativeEvent) {\n                // @ts-ignore fix method type\n                const nativeValue = event.nativeEvent[key];\n\n                if (value && value.setValue) {\n                  // Reanimated API\n                  value.setValue(nativeValue);\n                } else {\n                  // RN Animated API\n                  method.__nodeConfig.argMapping[index] = [key, nativeValue];\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n} // Validate the props\n\n\nfunction ensureConfig(config) {\n  const props = { ...config\n  }; // TODO(TS) We use ! to assert that if property is present then value is not empty (null, undefined)\n\n  if ('minDist' in config) {\n    props.minDist = config.minDist;\n    props.minDistSq = props.minDist * props.minDist;\n  }\n\n  if ('minVelocity' in config) {\n    props.minVelocity = config.minVelocity;\n    props.minVelocitySq = props.minVelocity * props.minVelocity;\n  }\n\n  if ('maxDist' in config) {\n    props.maxDist = config.maxDist;\n    props.maxDistSq = config.maxDist * config.maxDist;\n  }\n\n  if ('waitFor' in config) {\n    props.waitFor = asArray(config.waitFor).map(({\n      handlerTag\n    }) => NodeManager.getHandler(handlerTag)).filter(v => v);\n  } else {\n    props.waitFor = null;\n  }\n\n  const configProps = ['minPointers', 'maxPointers', 'minDist', 'maxDist', 'maxDistSq', 'minVelocitySq', 'minDistSq', 'minVelocity', 'failOffsetXStart', 'failOffsetYStart', 'failOffsetXEnd', 'failOffsetYEnd', 'activeOffsetXStart', 'activeOffsetXEnd', 'activeOffsetYStart', 'activeOffsetYEnd'];\n  configProps.forEach(prop => {\n    if (typeof props[prop] === 'undefined') {\n      props[prop] = Number.NaN;\n    }\n  });\n  return props; // TODO(TS) how to convince TS that props are filled?\n}\n\nfunction asArray(value) {\n  // TODO(TS) use config.waitFor type\n  return value == null ? [] : Array.isArray(value) ? value : [value];\n}\n\nexport default GestureHandler;\n//# sourceMappingURL=GestureHandler.js.map"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}